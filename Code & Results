import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D
import numpy as np
from sklearn.metrics import confusion_matrix

mnist = keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = keras.utils.normalize(x_train, axis=1)
x_test = keras.utils.normalize(x_test, axis=1)
x_train = np.array(x_train).reshape(-1, 28, 28, 1)
x_test = np.array(x_test).reshape(-1, 28, 28, 1)

model = Sequential()

model.add(Conv2D(64, (3,3), input_shape = x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size = (2,2)))

model.add(Conv2D(64, (3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size = (2,2)))

model.add(Flatten())

model.add(Dense(64))

model.add(Dense(10))
model.add(Activation('sigmoid'))

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
model.fit(x_train, y_train, batch_size = 32, epochs = 2)
test_loss, test_acc = model.evaluate(x_test, y_test)
print(test_loss, test_acc)

'''Results for Loss & Accuracy
Epoch 1/2
60000/60000 [==============================] - 107s 2ms/step - loss: 0.1633 - acc: 0.9505
Epoch 2/2
60000/60000 [==============================] - 108s 2ms/step - loss: 0.0589 - acc: 0.9817
10000/10000 [==============================] - 5s 533us/step
0.04951497924234718 0.9848'''

y_pred = model.predict([x_test])
pred = np.zeros(len(y_pred))
for i in range(len(y_pred)):
  pred[i]=(np.argmax(y_pred[i]))
C = confusion_matrix(y_test, pred)
print(C)

'''Confusion Matrix
[[ 975    0    1    0    0    0    2    1    1    0]
 [   0 1132    1    2    0    0    0    0    0    0]
 [   0    2 1023    2    1    0    0    2    2    0]
 [   0    0    0 1007    0    1    0    0    1    1]
 [   0    2    1    0  959    0    0    1    2   17]
 [   1    0    1   12    0  871    1    1    1    4]
 [   6    3    0    0    4    6  938    0    1    0]
 [   0    5   10   11    0    0    0  993    1    8]
 [   3    1    2    5    1    3    0    1  952    6]
 [   1    3    0    3    1    2    0    0    1  998]]'''
